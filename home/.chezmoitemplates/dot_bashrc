# Exit immediately if not running interactively.
[[ $- != *i* ]] && return

# detect whether session is remote or local
if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    SESSION_TYPE="remote/ssh"
else
    case $(ps -o comm= -p $PPID) in
        sshd|*/sshd) SESSION_TYPE="remote/ssh";;
    esac
fi
if [ -z "$SESSION_TYPE" ]; then
    SESSION_TYPE="local"
fi

# configure git
if [ -f ~/bin/git-completion.bash ]; then
    source ~/bin/git-completion.bash
fi
if [ -f ~/bin/git-prompt.sh ]; then
    source ~/bin/git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM="auto"
    HAVE_GIT_PROMPT=1
else
    HAVE_GIT_PROMPT=0
fi

{{ template "common_shell_config" . }}

{{ if lookPath "mcfly" -}}
eval "$(mcfly init bash)"
{{- end }}

## ----------------------------------------------
## Aliases
# manipulate directory stack
alias +='pushd .'  # add current dir to stack
alias ?='pushd'    # exchange top dirs on stack and move to other
alias -- -='popd'  # remove top dir and cd into it

## ----------------------------------------------
## Colour Codes
# Reset
COLOUR_OFF="\[\033[0m\]"

# Regular Colors
BLACK="\[\033[0;30m\]"
RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
YELLOW="\[\033[0;33m\]"
BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
CYAN="\[\033[0;36m\]"
WHITE="\[\033[0;37m\]"

# Bold
BBLACK="\[\033[1;30m\]"
BRED="\[\033[1;31m\]"
BGREEN="\[\033[1;32m\]"
BYELLOW="\[\033[1;33m\]"
BBLUE="\[\033[1;34m\]"
BPURPLE="\[\033[1;35m\]"
BCYAN="\[\033[1;36m\]"
BWHITE="\[\033[1;37m\]"

# Underline
UBLACK="\[\033[4;30m\]"
URED="\[\033[4;31m\]"
UGREEN="\[\033[4;32m\]"
UYELLOW="\[\033[4;33m\]"
UBLUE="\[\033[4;34m\]"
UPURPLE="\[\033[4;35m\]"
UCYAN="\[\033[4;36m\]"
UWHITE="\[\033[4;37m\]"

# Background
ON_BLACK="\[\033[40m\]"
ON_RED="\[\033[41m\]"
ON_GREEN="\[\033[42m\]"
ON_YELLOW="\[\033[43m\]"
ON_BLUE="\[\033[44m\]"
ON_PURPLE="\[\033[45m\]"
ON_CYAN="\[\033[46m\]"
ON_WHITE="\[\033[47m\]"

# High Intensty
IBLACK="\[\033[0;90m\]"
IRED="\[\033[0;91m\]"
IGREEN="\[\033[0;92m\]"
IYELLOW="\[\033[0;93m\]"
IBLUE="\[\033[0;94m\]"
IPURPLE="\[\033[0;95m\]"
ICYAN="\[\033[0;96m\]"
IWHITE="\[\033[0;97m\]"

# Bold High Intensty
BIBLACK="\[\033[1;90m\]"
BIRED="\[\033[1;91m\]"
BIGREEN="\[\033[1;92m\]"
BIYELLOW="\[\033[1;93m\]"
BIBLUE="\[\033[1;94m\]"
BIPURPLE="\[\033[1;95m\]"
BICYAN="\[\033[1;96m\]"
BIWHITE="\[\033[1;97m\]"

# High Intensty backgrounds
ON_IBLACK="\[\033[0;100m\]"
ON_IRED="\[\033[0;101m\]"
ON_IGREEN="\[\033[0;102m\]"
ON_IYELLOW="\[\033[0;103m\]"
ON_IBLUE="\[\033[0;104m\]"
ON_IPURPLE="\[\033[10;95m\]"
ON_ICYAN="\[\033[0;106m\]"
ON_IWHITE="\[\033[0;107m\]"

# Get the name of the currently active virtual environment.
# Outputs nothing if not in a virtual environment.
function venv-name() {
    # stop if no venv name set
    [ -z "$VIRTUAL_ENV" ] && return 0

    echo $VIRTUAL_ENV | sed 's:.*/\([^/]\+\)-[^-]\+:\1:'
}

## ----------------------------------------------
## Prompt
{{ if lookPath "starship" -}}
eval "$(starship init bash)"

{{- else -}}

# adjust prompt to whether user is root or not
export PROMPT_COMMAND='EXIT_CODE="$?";
  if [[ $EUID -ne 0 ]]; then
    __prompt_command $EXIT_CODE;
  else
    PS1="\[\033[0;91m\]$EXIT_CODE \[\033[0;97m\]\w \[\033[0;91m\](\A) \[\e[41;37;1m\]#\[\033[0m\] ";
  fi'


# Show battery status if discharging and below 25%.
# Change ADP1 and BAT0 if needed.
function _prompt_battery() {
    # start with check if adapter and battery name are correct
    if [ -e /sys/class/power_supply/AC/online ] && [ -e /sys/class/power_supply/BAT0/uevent ]; then
        # check whether power adapter is plugged in
        if [ $(cat /sys/class/power_supply/AC/online) -eq 0 ]; then
            local POWER_SUPPLY=$(cat /sys/class/power_supply/BAT0/uevent | grep POWER_SUPPLY_CAPACITY= | cut -d'=' -f 2)
            if [ $POWER_SUPPLY -lt 25 ]; then
                echo $IYELLOW"<⚡"$POWER_SUPPLY"%>"$COLOUR_OFF" "
            fi
        fi
    fi
}

# Indicate subshells through wedges.
# TODO Is it correct when using background jobs?
function _prompt_subshells() {
    # total number of instances of bash running in this process
    local nshells=$(ps | grep -o -c 'bash')
    # subtract subshell from command above, one for outter shell,
    # and one for shell this function is called in
    local nshells=$((nshells - 3))
    if (( $nshells > 0 )); then
        local res=$YELLOW
        for (( c=0; c<$nshells; c++ ))
        do
            res+="»"
        done
    fi
    echo $res
}

# Show git status
function _prompt_git_status() {
    if [ $HAVE_GIT_PROMPT ]; then
        if [[ $(command -v git) ]]; then
            # test whether dir is under vc
            git branch &>/dev/null
            if [ $? -eq 0 ]; then
                # check status and remove warning if in .git dir
                git status 2>&1 | grep -v "This operation must be run in a work tree" \
                    | sed '/^$/d' | grep "nothing to commit" > /dev/null 2>&1
                if [ $? -eq 0 ]; then
                    # clean repo
                    echo $GREEN$(__git_ps1 "[%s]")$COLOUR_OFF" "
                else
                    # unclean
                    echo $CYAN$(__git_ps1 "{%s}")$COLOUR_OFF" "
                fi
            fi
        fi
    fi
}

# Show number of background and stopped jobs.
function _prompt_job_info() {
    local bgjbs=$(jobs -r | wc -l | tr -d ' ')
    local stjbs=$(jobs -s | wc -l | tr -d ' ')
    if [ $bgjbs -gt 0 ]; then
        local res=$YELLOW"(bg:$bgjbs"
        if [ $stjbs -gt 0 ]; then
            res+=", stp:$stjbs"
        fi
        echo $res")"$COLOUR_OFF" "
    elif [ $stjbs -gt 0 ]; then
        echo $YELLOW"(stp:$stjbs)"$COLOUR_OFF" "
    fi
}

# Show working directory, abbreviate if too long.
function _prompt_working_dir() {
    local wd=$(pwd)
    echo $(echo ${wd/#$HOME/\~} | awk 'BEGIN {FS="/"};\
 {output="";}\
 {f1=""; f2=""; f3="";}\
 {ellipsis="\xE2\x80\xA6";}\
 {filler="";}\
 {nmax=10;}\
 {if (NF > 3)\
  {f1=$1; f2=$(NF-1); f3=$(NF); filler=ellipsis"/"}\
 else\
  {f1=$1; f2=$2; f3=$3}};\
 {if (length(f1) > nmax) {f1 = substr(f1,0,nmax)""ellipsis}};\
 {if (length(f2) > nmax) {f2 = substr(f2,0,nmax)""ellipsis}};\
 {if (length(f3) > nmax) {f3 = substr(f3,0,nmax)""ellipsis}};\
 {if (length(f2) > 0) {f1 = f1"/";\
   if (length(f3) > 0) {f2 = f2"/"; f3 = "\\[\\033[0;97m\\]"f3}\
   else {f2 = "\\[\\033[0;97m\\]"f2}}\
 else {if (length(f1) == 0) {f1 = "/"};\
   f1 = "\\[\\033[0;97m\\]"f1}\
 };\
 {output = f1""filler""f2""f3;}\
 {print output}')$COLOUR_OFF" "
}

# Indicate Python virtual environment
function _prompt_python_venv() {
    if [ -z "${CONDA_PROMPT_MODIFIER+x}" ]; then
        if [ "$PIPENV_ACTIVE" == "1" ]; then
            echo $IGREEN" "$GREEN$(venv-name)"+"$COLOUR_OFF" "
        fi
    else
        echo $IGREEN" "$GREEN${CONDA_PROMPT_MODIFIER:1:-2}$COLOUR_OFF" "
    fi
}

function __prompt_command() {
    local EXIT_CODE="$1"
    PS1=""

    if [ "$SESSION_TYPE" = "remote/ssh" ]; then
        # show host name for remote sessions
        PS1+=$IBLUE"\h:"$COLOUR_OFF" "
    else
        # and battery status for local sessions
        PS1+=$(_prompt_battery)
    fi

    # PS1+=$(_prompt_subshells)

    # show exit code of last program if non-zero
    if [ $EXIT_CODE -ne 0 ]; then
        PS1+=$IRED$EXIT_CODE$COLOUR_OFF" "
    fi

    PS1+=$(_prompt_git_status)$(_prompt_job_info)$(_prompt_python_venv)$(_prompt_working_dir)

    # dollar
    if [ "$SESSION_TYPE" = "remote/ssh" ]; then
        PS1+=$IBLUE
    else
        PS1+=$RED
    fi
    PS1+="\$"$COLOUR_OFF" "
}
{{- end }}

## ----------------------------------------------
## Get power level
# TODO use upower instead
function power() {
    if [ ! -e /sys/class/power_supply/AC/online ]; then
        echo "File for power adaptor not found."
        return 1
    fi
    if [ ! -e /sys/class/power_supply/BAT0/uevent ]; then
        echo "File for battery not found."
        return 1
    fi

    # can't use pre defined colour because \[ and \] are displayed by echo
    local POWER_SUPPLY=$(cat /sys/class/power_supply/BAT0/uevent | grep POWER_SUPPLY_CAPACITY= | cut -d'=' -f 2)
    if [ $(cat /sys/class/power_supply/AC/online) -eq 1 ]; then
        if [ $POWER_SUPPLY -eq 100 ]; then
            echo -e "\033[0;92mBattery fully charged.\033[0m"
        else
            echo -e "\033[0;32mBattery at "$POWER_SUPPLY"% and charging.\033[0m"
        fi
    elif [ $POWER_SUPPLY -lt 25 ]; then
        echo -e "\033[0;31mBattery at "$POWER_SUPPLY"% and discharging.\033[0m"
    else
        echo -e "\033[0;93mBattery at "$POWER_SUPPLY"% and discharging.\033[0m"
    fi
}

## ----------------------------------------------
## Describe error code
# restricted to bash codes
function wtf() {
    EXIT_CODE=$?
    if [[ $# -eq "1" ]]; then
        EXIT_CODE=$1
    fi

    # deal with signals separately
    if (( 129 <= $EXIT_CODE && $EXIT_CODE <= 192 )); then
        SIGNAL=$(($EXIT_CODE-128));
        SIGNAME=$(kill -l $SIGNAL);
        if (( ${#SIGNAME} == 0 )); then
            printf "Code %d: Recieved signal %d. This signal is not implemented!\n" $EXIT_CODE $SIGNAL;
        else
            printf "Code %d: Recieved signal %d, SIG%s\n" $EXIT_CODE $SIGNAL $SIGNAME;
        fi
        return 0
    fi

    case $EXIT_CODE in
        0)
            printf "Code %d: No error\n" $EXIT_CODE;;
        1)
            printf "Code %d: Miscellanious error\n" $EXIT_CODE;;
        2)
            printf "Code %d: Misuse of shell buitlins\n" $EXIT_CODE;;
        126)
            printf "Code %d: Command cannot be executed\n" $EXIT_CODE;;
        127)
            printf "Code %d: Command not found\n" $EXIT_CODE;;
        128)
            printf "Code %d: Invalid argument to 'exit'\n" $EXIT_CODE;;
        255)
            printf "Code %d: Exit code out of range\n" $EXIT_CODE;;
        *)
            printf "Code %d: No description of code found\n" $EXIT_CODE;;
    esac
}
